using System.Text;
using HelmSonetaGenerator.Entities;
using HelmSonetaGenerator.Generators;

public class HelmYamlGenerator : IHelmYamlGenerator
{
    public string GenerateApplicationYaml(Document d)
    {
        var sb = new StringBuilder();
        sb.AppendLine("apiVersion: argoproj.io/v1alpha1");
        sb.AppendLine("kind: Application");
        sb.AppendLine("metadata:");
        sb.AppendLine($"  name: {d.AppName}");
        sb.AppendLine("  namespace: argocd");
        sb.AppendLine("spec:");
        sb.AppendLine("  project: default");
        sb.AppendLine("  source:");
        sb.AppendLine($"    repoURL: {d.RepoUrl}");
        sb.AppendLine($"    path: {d.Path}");
        sb.AppendLine($"    targetRevision: {d.TargetRevision}");
        sb.AppendLine("    helm:");
        sb.AppendLine("      values: |");
        // Begin values block (indented by 8 spaces inside the block literal)
        sb.AppendLine("        listaBazDanych: |");
        sb.AppendLine("          <DatabaseCollection>");
        sb.AppendLine("            <MsSqlDatabase>");
        sb.AppendLine($"            <Name>{d.DbName}</Name>");
        sb.AppendLine("            <Description />");
        sb.AppendLine("            <Active>true</Active>");
        sb.AppendLine("            <DifferentSecondaryDatabase>false</DifferentSecondaryDatabase>");
        sb.AppendLine("            <UpdateFeaturesLegacyMode>false</UpdateFeaturesLegacyMode>");
        sb.AppendLine("            <OperatorName>?</OperatorName>");
        sb.AppendLine("            <WindowsAuthentication>false</WindowsAuthentication>");
        sb.AppendLine("            <LicencesSelection>false</LicencesSelection>");
        sb.AppendLine("            <IsOptimalization>true</IsOptimalization>");
        sb.AppendLine("            <BatchLinks>100</BatchLinks>");
        sb.AppendLine("            <BatchFeatures>100</BatchFeatures>");
        sb.AppendLine("            <BatchSubTables>40</BatchSubTables>");
        sb.AppendLine("            <NonCollectedRows>50000</NonCollectedRows>");
        sb.AppendLine("            <LockNotification>false</LockNotification>");
        sb.AppendLine($"            <Server>{d.DbServer}</Server>");
        sb.AppendLine($"            <DatabaseName>{d.DbName}</DatabaseName>");
        sb.AppendLine($"            <User>{d.DbUser}</User>");
        sb.AppendLine($"            <Password>{d.DbPassword}</Password>");
        sb.AppendLine($"            <Trusted>{d.DbTrusted.ToString().ToLower()}</Trusted>");
        sb.AppendLine("            <SecondaryServer />");
        sb.AppendLine("            <SecondaryDatabaseName />");
        sb.AppendLine("            <SecondaryUser />");
        sb.AppendLine("            <SecondaryTrusted>false</SecondaryTrusted>");
        sb.AppendLine("            <VirtualTeleKeySerial>00000000</VirtualTeleKeySerial>");
        sb.AppendLine("            <UseConnectionString>false</UseConnectionString>");
        sb.AppendLine($"            <TrustServerCertificate>{d.DbTrustServerCertificate.ToString().ToLower()}</TrustServerCertificate>");
        sb.AppendLine("            <Timeout>15</Timeout>");
        sb.AppendLine("            </MsSqlDatabase>");
        sb.AppendLine("          </DatabaseCollection>");
        sb.AppendLine();
        sb.AppendLine($"        adminMode: {d.AdminMode.ToString().ToLower()}");
        sb.AppendLine($"        replicaCount: {d.ReplicaCount}");
        sb.AppendLine("        image:");
        sb.AppendLine($"          product: \"{d.Product}\"");
        sb.AppendLine($"          tag: \"{d.Tag}\"");
        sb.AppendLine($"          webTagPostfix: {d.WebTagPostfix}");
        sb.AppendLine($"          serverTagPostfix: {d.ServerTagPostfix}");
        sb.AppendLine($"          repository: \"{d.Repository}\"");
        sb.AppendLine($"          scheduler: {d.Scheduler.ToString().ToLower()}");
        sb.AppendLine($"          webapi: {d.WebApi.ToString().ToLower()}");
        sb.AppendLine($"          webwcf: {d.WebWcf.ToString().ToLower()}");
        sb.AppendLine();
        sb.AppendLine("        imagePullSecrets: []");
        sb.AppendLine("        nameOverride: \"\"");
        sb.AppendLine("        fullnameOverride: \"\"");
        sb.AppendLine();
        sb.AppendLine("        service:");
        sb.AppendLine("          type: NodePort");
        sb.AppendLine("          server:");
        sb.AppendLine("            type: ClusterIP");
        sb.AppendLine();
        sb.AppendLine("        appsettings: ");
        sb.AppendLine("          CommHub:");
        sb.AppendLine("            GarnetServer:");
        sb.AppendLine("              MemorySize: \"16m\"");
        sb.AppendLine("              IndexSize: \"16m\"");
        sb.AppendLine("              PageSize: \"4m\"");
        sb.AppendLine("          HealthCheck:");
        sb.AppendLine("            Enabled: true");
        sb.AppendLine();
        sb.AppendLine("        ingress:");
        sb.AppendLine($"          enabled: {d.IngressEnabled.ToString().ToLower()}");
        sb.AppendLine("          # releaseAutoAnnotation: ");
        sb.AppendLine("          #   key: nginx.ingress.kubernetes.io/session-cookie-name");
        sb.AppendLine("          #   prefix: \"\"");
        sb.AppendLine("          #   postfix: \"-INGRESSCOOKIE\"");
        sb.AppendLine("          # annotations:");
        sb.AppendLine("          #   nginx.ingress.kubernetes.io/affinity: cookie ");
        sb.AppendLine($"          class: {d.IngressClass}");
        sb.AppendLine($"          host: {d.IngressHost}");
        if (!string.IsNullOrWhiteSpace(d.IngressTlsSecretName))
        {
            sb.AppendLine($"          tlsSecretName: {d.IngressTlsSecretName}");
        }
        else
        {
            sb.AppendLine("          # tlsSecretName: soneta-ingress-tls");
        }
        sb.AppendLine();
        sb.AppendLine("        default-small-component-resources: &default-small-component-resources");
        sb.AppendLine("          limits:");
        sb.AppendLine("            cpu: 250m");
        sb.AppendLine("            memory: 256Mi");
        sb.AppendLine("          requests:");
        sb.AppendLine("            cpu: 50m");
        sb.AppendLine("            memory: 128Mi");
        sb.AppendLine();
        sb.AppendLine("        default-big-component-resources: &default-big-component-resources");
        sb.AppendLine("          limits:");
        sb.AppendLine("            cpu: '1'");
        sb.AppendLine("            memory: 1Gi");
        sb.AppendLine("          requests:");
        sb.AppendLine("            cpu: 250m");
        sb.AppendLine("            memory: 384Mi");
        sb.AppendLine();
        sb.AppendLine("        resources:");
        sb.AppendLine("          pvc:");
        sb.AppendLine("            spec:");
        sb.AppendLine("              accessModes:");
        sb.AppendLine("                - ReadWriteMany");
        sb.AppendLine("              resources:");
        sb.AppendLine("                requests:");
        sb.AppendLine("                  storage: 10Mi");
        sb.AppendLine("          web:");
        sb.AppendLine("            <<: *default-small-component-resources");
        sb.AppendLine("          webapi:");
        sb.AppendLine("            <<: *default-small-component-resources");
        sb.AppendLine("          webwcf:");
        sb.AppendLine("            <<: *default-small-component-resources");
        sb.AppendLine("          orchestrator:");
        sb.AppendLine("            <<: *default-small-component-resources");
        sb.AppendLine("          router:");
        sb.AppendLine("            <<: *default-small-component-resources");
        sb.AppendLine("          commhub:");
        sb.AppendLine("            <<: *default-small-component-resources");
        sb.AppendLine("          server:");
        sb.AppendLine("            <<: *default-big-component-resources");
        sb.AppendLine("          scheduler:");
        sb.AppendLine("            <<: *default-big-component-resources");
        sb.AppendLine("          admin:");
        sb.AppendLine("            <<: *default-big-component-resources");
        sb.AppendLine();
        sb.AppendLine("        nodeSelector: []");
        sb.AppendLine();
        sb.AppendLine("        tolerations: []");
        sb.AppendLine();
        sb.AppendLine("        affinity: {}");
        sb.AppendLine();
        sb.AppendLine("        volumes:");
        sb.AppendLine("          all: []");
        sb.AppendLine("          frontend: []");
        sb.AppendLine("          web: []");
        sb.AppendLine("          webapi: []");
        sb.AppendLine("          webwcf: []");
        sb.AppendLine("          backend: []");
        sb.AppendLine("          server:");
        sb.AppendLine("          - name: pv-storage");
        sb.AppendLine("            mountPath: /dodatki");
        sb.AppendLine("            spec:");
        sb.AppendLine("              description: pv-storage");
        sb.AppendLine("          scheduler: []");
        sb.AppendLine("          admin: []");
        sb.AppendLine();
        sb.AppendLine("        envs:");
        sb.AppendLine("          all: []");
        sb.AppendLine("          frontend: []");
        sb.AppendLine("          web: []");
        sb.AppendLine("          webapi: []");
        sb.AppendLine("          webwcf: []");
        sb.AppendLine("          backend: []");
        sb.AppendLine("          server: []");
        sb.AppendLine("          scheduler: []");
        sb.AppendLine("          admin: []");
        sb.AppendLine();
        sb.AppendLine("        args:");
        sb.AppendLine("          all: []");
        sb.AppendLine("          frontend: []");
        sb.AppendLine("          web: []");
        sb.AppendLine("          webapi: []");
        sb.AppendLine("          webwcf: []");
        sb.AppendLine("          backend: []");
        sb.AppendLine("          server: []");
        sb.AppendLine("          scheduler: []");
        sb.AppendLine("          admin: []");
        sb.AppendLine();
        sb.AppendLine($"        initializationCommand: \"{d.InitializationCommand.Replace("\"", "\\\"")}\"");
        sb.AppendLine();
        sb.AppendLine("  destination:");
        sb.AppendLine("    server: 'https://kubernetes.default.svc'");
        sb.AppendLine($"    namespace: {d.Namespace}");
        sb.AppendLine("  ignoreDifferences:");
        sb.AppendLine("  - group: apps");
        sb.AppendLine("    kind: Deployment");
        sb.AppendLine("  syncPolicy:");
        sb.AppendLine("    automated:");
        sb.AppendLine("      prune: true");
        sb.AppendLine("      selfHeal: true");
        sb.AppendLine("    syncOptions:");
        sb.AppendLine("      - CreateNamespace=true");
        return sb.ToString();
    }
}